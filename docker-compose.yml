version: '3.9'

services:
  # Backend Service
  backend:
    build: ./backend
    container_name: multi-agent-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - /app/__pycache__
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - multi-agent-network

  # Frontend Service
  frontend:
    build: ./frontend
    container_name: multi-agent-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - multi-agent-network

  # Optional: PostgreSQL Database (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: multi-agent-db
  #   environment:
  #     - POSTGRES_DB=multi_agent_db
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - multi-agent-network

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: multi-agent-redis
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped
  #   networks:
  #     - multi-agent-network

networks:
  multi-agent-network:
    driver: bridge

# volumes:
#   postgres_data:
